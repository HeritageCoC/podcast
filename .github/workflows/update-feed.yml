name: Update Podcast Feed

on:
  schedule:
    # Run every 6 hours to check for new sermons
    - cron: '0 */6 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ main ]
    paths:
      - 'config.json'

permissions:
  contents: write  # Allow the workflow to write to the repository

jobs:
  update-feed:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Generate RSS Feed
      run: |
        echo "Starting RSS generation..."
        
        # Read the config file to make sure it exists
        if [ ! -f "config.json" ]; then
          echo "‚ùå config.json not found!"
          exit 1
        fi
        
        echo "‚úÖ config.json found"
        cat config.json
        
        # Create Node.js script to generate RSS
        cat > generate-rss.js << 'EOF'
        const fs = require('fs');
        
        console.log('üöÄ Starting RSS generation script...');
        
        // Read config
        let config;
        try {
          config = JSON.parse(fs.readFileSync('config.json', 'utf8'));
          console.log('‚úÖ Config loaded:', config.podcastTitle);
        } catch (error) {
          console.error('‚ùå Error reading config:', error);
          process.exit(1);
        }

        function escapeXML(str) {
            if (!str) return '';
            return str.replace(/[<>&'"]/g, function (c) {
                switch (c) {
                    case '<': return '&lt;';
                    case '>': return '&gt;';
                    case '&': return '&amp;';
                    case '\'': return '&apos;';
                    case '"': return '&quot;';
                }
            });
        }

        function formatDuration(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;
            
            if (hours > 0) {
                return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            } else {
                return `${minutes}:${secs.toString().padStart(2, '0')}`;
            }
        }

        // For now, use sample data (later we'll add Vimeo API integration)
        function getSampleData() {
            return {
                "providerName": config.podcastAuthor,
                "lastUpdated": new Date().toISOString(),
                "language": config.podcastLanguage,
                "movies": [
                    {"id":"1099141295","title":"\"The Breath of Life\" Chad Hedgpath 7.13.25","shortDescription":"\"The Breath of Life\" Chad Hedgpath 7.13.25","thumbnail":"https://i.vimeocdn.com/video/2033995829-9d172f0bf99cec1433932745b8a8ccfb30cf7f45f953c439763888cbabfb82e1-d_800x450?region=us","releaseDate":"2025-07-06T10:58:00-04:00","genres":["faith"],"tags":["faith"],"content":{"dateAdded":"2025-07-13T15:56:09-04:00","duration":4673,"videos":[{"url":"https://player.vimeo.com/external/1099141295.m3u8?s=5ce6ae724ce3f567961026b5a12094bf32d557a1","quality":"HD","videoType":"HLS","bitrate":null}]}},
                    {"id":"1097306715","title":"\"Jonah the Patriot\" Travis Roberstson 7.6.2025","shortDescription":"\"Jonah the Patriot\" Travis Roberstson 7.6.2025","thumbnail":"https://i.vimeocdn.com/video/2031613024-2931fa67f75a6ea25a14cdd23369faf4c87e649405c837b2013be878a76bdb8d-d_800x450?region=us","releaseDate":"2025-06-29T10:59:41-04:00","genres":["faith"],"tags":["faith"],"content":{"dateAdded":"2025-07-06T17:54:11-04:00","duration":3575,"videos":[{"url":"https://player.vimeo.com/external/1097306715.m3u8?s=26100bbb1ef991ff1dd99d8fe220fcef11a32bc1","quality":"HD","videoType":"HLS","bitrate":null}]}},
                    {"id":"1095396640","title":"\"What Goes Up, Must Come Down\"  6-29-25","shortDescription":"\"What Goes Up, Must Come Down\"  6-29-25","thumbnail":"https://i.vimeocdn.com/video/2029195244-f881c224bf8d51c558e89b35c0ebe53e98de868ceaeccac1558f98200e9fba89-d_800x450?region=us","releaseDate":"2025-06-22T10:59:56-04:00","genres":["faith"],"tags":["faith"],"content":{"dateAdded":"2025-06-29T11:03:03-04:00","duration":3801,"videos":[{"url":"https://player.vimeo.com/external/1095396640.m3u8?s=21ede852bbed805d4c49a9ac8f30c0d8a206237d","quality":"HD","videoType":"HLS","bitrate":null}]}},
                    {"id":"1093498929","title":"\"Was the Holy Spirit in the Old Testament\"  6-22-25","shortDescription":"\"Was the Holy Spirit in the Old Testament\"  6-22-25","thumbnail":"https://i.vimeocdn.com/video/2026857899-d3021c453cff977e363799d1bfd7e7c9bbb6fa4c50dc902d9a86dbe801ad2b41-d_800x450?region=us","releaseDate":"2025-06-15T11:00:42-04:00","genres":["faith"],"tags":["faith"],"content":{"dateAdded":"2025-06-22T11:01:01-04:00","duration":3677,"videos":[{"url":"https://player.vimeo.com/external/1093498929.m3u8?s=a9cb44fe6614d22ffb9ee0fad95a49ff927a5809","quality":"HD","videoType":"HLS","bitrate":null}]}},
                    {"id":"1091602933","title":"\"The Holy Spirit is Working in Our Fathers\"  6-15-25","shortDescription":"\"The Holy Spirit is Working in Our Fathers\"  6-15-25","thumbnail":"https://i.vimeocdn.com/video/2024477786-e995b97262a2dc68ce0bd1e2f7c00e077158bf0c976ab65d109a9602940901af-d_800x450?region=us","releaseDate":"2025-06-08T11:04:27-04:00","genres":["faith"],"tags":["faith"],"content":{"dateAdded":"2025-06-15T11:01:23-04:00","duration":3896,"videos":[{"url":"https://player.vimeo.com/external/1091602933.m3u8?s=b33d50db763b6a10232e26abab5ff9bd556270ce","quality":"HD","videoType":"HLS","bitrate":null}]}}
                ]
            };
        }

        function generateRSS(vimeoData) {
            console.log('üìù Generating RSS with', vimeoData.movies.length, 'episodes');
            
            const baseUrl = 'https://heritagecoc.github.io/podcast';
            const artworkUrl = config.podcastArtwork.startsWith('http') ? 
                config.podcastArtwork : `${baseUrl}/${config.podcastArtwork.replace('./', '')}`;
            
            const now = new Date().toUTCString();
            const buildDate = new Date(vimeoData.lastUpdated).toUTCString();
            
            let rss = `<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:content="http://purl.org/rss/1.0/modules/content/">
<channel>
    <title>${escapeXML(config.podcastTitle)}</title>
    <link>${config.churchWebsite}</link>
    <description>${escapeXML(config.podcastDescription)}</description>
    <language>${config.podcastLanguage}</language>
    <copyright>¬© ${new Date().getFullYear()} ${escapeXML(config.podcastAuthor)}</copyright>
    <managingEditor>${config.podcastEmail} (${escapeXML(config.podcastAuthor)})</managingEditor>
    <webMaster>${config.podcastEmail} (${escapeXML(config.podcastAuthor)})</webMaster>
    <pubDate>${now}</pubDate>
    <lastBuildDate>${buildDate}</lastBuildDate>
    <generator>GitHub Actions Podcast RSS Generator v2.0</generator>
    
    <!-- iTunes Podcast Tags -->
    <itunes:author>${escapeXML(config.podcastAuthor)}</itunes:author>
    <itunes:summary>${escapeXML(config.podcastDescription)}</itunes:summary>
    <itunes:owner>
        <itunes:name>${escapeXML(config.podcastAuthor)}</itunes:name>
        <itunes:email>${config.podcastEmail}</itunes:email>
    </itunes:owner>
    <itunes:explicit>false</itunes:explicit>
    <itunes:category text="${config.podcastCategory}"${config.podcastSubcategory ? `>\n        <itunes:category text="${config.podcastSubcategory}" />\n    </itunes:category` : ' /'}">
    <itunes:image href="${artworkUrl}" />
    <itunes:type>episodic</itunes:type>
`;

            // Add episodes
            vimeoData.movies.forEach((movie, index) => {
                const episodeNumber = vimeoData.movies.length - index;
                const pubDate = new Date(movie.releaseDate).toUTCString();
                const duration = formatDuration(movie.content.duration);
                
                rss += `
    <item>
        <title>${escapeXML(movie.title)}</title>
        <description>${escapeXML(movie.shortDescription || movie.title)}</description>
        <link>https://vimeo.com/${movie.id}</link>
        <guid isPermaLink="false">vimeo-${movie.id}</guid>
        <pubDate>${pubDate}</pubDate>
        <enclosure url="${movie.content.videos[0].url}" type="application/x-mpegURL" length="0" />
        
        <!-- iTunes Episode Tags -->
        <itunes:title>${escapeXML(movie.title)}</itunes:title>
        <itunes:summary>${escapeXML(movie.shortDescription || movie.title)}</itunes:summary>
        <itunes:duration>${duration}</itunes:duration>
        <itunes:episode>${episodeNumber}</itunes:episode>
        <itunes:episodeType>full</itunes:episodeType>
        <itunes:explicit>false</itunes:explicit>
        <itunes:image href="${movie.thumbnail}" />
    </item>`;
            });

            rss += `
</channel>
</rss>`;

            return rss;
        }

        try {
            console.log('üì° Getting episode data...');
            const vimeoData = getSampleData(); // Using sample data for now
            
            console.log('üìù Generating RSS...');
            const rss = generateRSS(vimeoData);
            
            console.log('üíæ Writing RSS to feed.xml...');
            fs.writeFileSync('feed.xml', rss);
            
            console.log('‚úÖ RSS feed generated successfully!');
            console.log('üìÑ File size:', fs.statSync('feed.xml').size, 'bytes');
            console.log('üïê Generated at:', new Date().toISOString());
            
        } catch (error) {
            console.error('‚ùå Error generating RSS:', error);
            process.exit(1);
        }
        EOF
        
        echo "üìù Running RSS generation script..."
        node generate-rss.js
        
        # Verify the file was created
        if [ -f "feed.xml" ]; then
          echo "‚úÖ feed.xml created successfully!"
          echo "üìÑ File size: $(wc -c < feed.xml) bytes"
          echo "üìù First few lines:"
          head -10 feed.xml
        else
          echo "‚ùå feed.xml was not created!"
          exit 1
        fi
        
    - name: Commit updated feed
      run: |
        echo "üîç Checking for changes to feed.xml..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action RSS Bot"
        
        # Check if feed.xml has changed
        if git diff --quiet feed.xml; then
          echo "‚ÑπÔ∏è No changes to feed.xml - skipping commit"
        else
          echo "üìù Changes detected in feed.xml - committing..."
          git add feed.xml
          git status
          git commit -m "üéôÔ∏è Auto-update RSS feed - $(date '+%Y-%m-%d %H:%M UTC')"
          git push
          echo "‚úÖ RSS feed updated and committed successfully!"
        fi
